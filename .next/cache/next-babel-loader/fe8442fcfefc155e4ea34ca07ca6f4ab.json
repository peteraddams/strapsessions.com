{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useMemo } from 'react';\nimport { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunkMiddleware from 'redux-thunk';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\nimport { products, semiAuth, revolver, ak, tactical, leverAction, derringer, ars, aks, boltAction, hunting, rftactical, selfdefense, rim, handAmmuni, rifleammuni } from '../json-data/products';\nvar store;\nimport { ADD_TO_CART, REMOVE_ITEM, SUB_QUANTITY, ADD_QUANTITY, ADD_SHIPPING, ADD_QUANTITY_WITH_NUMBER, RESET_CART, ADD_TO_COMPARE, REMOVE_ITEM_FROM_COMPARE } from '../actions/action-types/action-names';\nvar initialState = {\n  products: products,\n  semiAuth: semiAuth,\n  revolver: revolver,\n  ak: ak,\n  tactical: tactical,\n  leverAction: leverAction,\n  derringer: derringer,\n  ars: ars,\n  aks: aks,\n  boltAction: boltAction,\n  hunting: hunting,\n  rftactical: rftactical,\n  selfdefense: selfdefense,\n  rim: rim,\n  handAmmuni: handAmmuni,\n  rifleammuni: rifleammuni,\n  addedItems: [],\n  addedItemsToCompare: [],\n  total: 0,\n  shipping: 0\n};\nexport var reducers = function reducers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === ADD_TO_CART) {\n    var addedItem = state.products.find(function (item) {\n      return item.id === action.id;\n    }) || state.semiAuth.find(function (item) {\n      return item.id === action.id;\n    }) || state.revolver.find(function (item) {\n      return item.id === action.id;\n    }) || state.ak.find(function (item) {\n      return item.id === action.id;\n    }) || state.tactical.find(function (item) {\n      return item.id === action.id;\n    }) || state.leverAction.find(function (item) {\n      return item.id === action.id;\n    }) || state.derringer.find(function (item) {\n      return item.id === action.id;\n    }) || state.ars.find(function (item) {\n      return item.id === action.id;\n    }) || state.aks.find(function (item) {\n      return item.id === action.id;\n    }) || state.boltAction.find(function (item) {\n      return item.id === action.id;\n    }) || state.hunting.find(function (item) {\n      return item.id === action.id;\n    }) || state.rftactical.find(function (item) {\n      return item.id === action.id;\n    }) || state.selfdefense.find(function (item) {\n      return item.id === action.id;\n    }) || state.rim.find(function (item) {\n      return item.id === action.id;\n    }) || state.handAmmuni.find(function (item) {\n      return item.id === action.id;\n    }) || state.rifleammuni.find(function (item) {\n      return item.id === action.id;\n    }); //check if the action id exists in the addedItems\n\n    var existed_item = state.addedItems.find(function (item) {\n      return action.id === item.id;\n    });\n\n    if (existed_item) {\n      addedItem.quantity += 1;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        total: state.total + addedItem.price\n      });\n    } else {\n      addedItem.quantity = 1; //calculating the total\n\n      var newTotal = state.total + addedItem.price;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addedItems: [].concat(_toConsumableArray(state.addedItems), [addedItem]),\n        total: newTotal\n      });\n    }\n  }\n\n  if (action.type === ADD_TO_COMPARE) {\n    var addedItemToCompare = state.products.find(function (item) {\n      return item.id === action.id;\n    }) || state.semiAuth.find(function (item) {\n      return item.id === action.id;\n    }) || state.revolver.find(function (item) {\n      return item.id === action.id;\n    }) || state.ak.find(function (item) {\n      return item.id === action.id;\n    }) || state.tactical.find(function (item) {\n      return item.id === action.id;\n    }) || state.leverAction.find(function (item) {\n      return item.id === action.id;\n    }) || state.derringer.find(function (item) {\n      return item.id === action.id;\n    }) || state.ars.find(function (item) {\n      return item.id === action.id;\n    }) || state.aks.find(function (item) {\n      return item.id === action.id;\n    }) || state.boltAction.find(function (item) {\n      return item.id === action.id;\n    }) || state.hunting.find(function (item) {\n      return item.id === action.id;\n    }) || state.rftactical.find(function (item) {\n      return item.id === action.id;\n    }) || state.selfdefense.find(function (item) {\n      return item.id === action.id;\n    }) || state.rim.find(function (item) {\n      return item.id === action.id;\n    }) || state.handAmmuni.find(function (item) {\n      return item.id === action.id;\n    }) || state.rifleammuni.find(function (item) {\n      return item.id === action.id;\n    });\n    addedItemToCompare.quantity = 1;\n    return _objectSpread(_objectSpread({}, state), {}, {\n      addedItemsToCompare: [].concat(_toConsumableArray(state.addedItemsToCompare), [addedItemToCompare])\n    });\n  }\n\n  if (action.type === ADD_QUANTITY_WITH_NUMBER) {\n    var _addedItem = state.products.find(function (item) {\n      return item.id === action.id;\n    }) || state.semiAuth.find(function (item) {\n      return item.id === action.id;\n    }) || state.revolver.find(function (item) {\n      return item.id === action.id;\n    }) || state.ak.find(function (item) {\n      return item.id === action.id;\n    }) || state.tactical.find(function (item) {\n      return item.id === action.id;\n    }) || state.leverAction.find(function (item) {\n      return item.id === action.id;\n    }) || state.derringer.find(function (item) {\n      return item.id === action.id;\n    }) || state.ars.find(function (item) {\n      return item.id === action.id;\n    }) || state.aks.find(function (item) {\n      return item.id === action.id;\n    }) || state.boltAction.find(function (item) {\n      return item.id === action.id;\n    }) || state.hunting.find(function (item) {\n      return item.id === action.id;\n    }) || state.rftactical.find(function (item) {\n      return item.id === action.id;\n    }) || state.selfdefense.find(function (item) {\n      return item.id === action.id;\n    }) || state.rim.find(function (item) {\n      return item.id === action.id;\n    }) || state.handAmmuni.find(function (item) {\n      return item.id === action.id;\n    }) || state.rifleammuni.find(function (item) {\n      return item.id === action.id;\n    }); //check if the action id exists in the addedItems\n\n\n    var _existed_item = state.addedItems.find(function (item) {\n      return action.id === item.id;\n    });\n\n    if (_existed_item) {\n      _addedItem.quantity += action.qty;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        total: state.total + _addedItem.price * action.qty\n      });\n    } else {\n      _addedItem.quantity = action.qty; //calculating the total\n\n      var _newTotal = state.total + _addedItem.price * action.qty;\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addedItems: [].concat(_toConsumableArray(state.addedItems), [_addedItem]),\n        total: _newTotal\n      });\n    }\n  }\n\n  if (action.type === REMOVE_ITEM) {\n    var itemToRemove = state.addedItems.find(function (item) {\n      return action.id === item.id;\n    });\n    var new_items = state.addedItems.filter(function (item) {\n      return action.id !== item.id;\n    }); //calculating the total\n\n    var _newTotal2 = state.total - itemToRemove.price * itemToRemove.quantity;\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      addedItems: new_items,\n      total: _newTotal2\n    });\n  }\n\n  if (action.type === REMOVE_ITEM_FROM_COMPARE) {\n    var _new_items = state.addedItemsToCompare.filter(function (item) {\n      return action.id !== item.id;\n    });\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      addedItemsToCompare: _new_items\n    });\n  }\n\n  if (action.type === ADD_QUANTITY) {\n    var _addedItem2 = state.products.find(function (item) {\n      return item.id === action.id;\n    });\n\n    _addedItem2.quantity += 1;\n\n    var _newTotal3 = state.total + _addedItem2.price;\n\n    return _objectSpread(_objectSpread({}, state), {}, {\n      total: _newTotal3\n    });\n  }\n\n  if (action.type === SUB_QUANTITY) {\n    var _addedItem3 = state.products.find(function (item) {\n      return item.id === action.id;\n    }) || state.semiAuth.find(function (item) {\n      return item.id === action.id;\n    }) || state.revolver.find(function (item) {\n      return item.id === action.id;\n    }) || state.ak.find(function (item) {\n      return item.id === action.id;\n    }) || state.tactical.find(function (item) {\n      return item.id === action.id;\n    }) || state.leverAction.find(function (item) {\n      return item.id === action.id;\n    }) || state.derringer.find(function (item) {\n      return item.id === action.id;\n    }) || state.ars.find(function (item) {\n      return item.id === action.id;\n    }) || state.aks.find(function (item) {\n      return item.id === action.id;\n    }) || state.boltAction.find(function (item) {\n      return item.id === action.id;\n    }) || state.hunting.find(function (item) {\n      return item.id === action.id;\n    }) || state.rftactical.find(function (item) {\n      return item.id === action.id;\n    }) || state.selfdefense.find(function (item) {\n      return item.id === action.id;\n    }) || state.rim.find(function (item) {\n      return item.id === action.id;\n    }) || state.handAmmuni.find(function (item) {\n      return item.id === action.id;\n    }) || state.rifleammuni.find(function (item) {\n      return item.id === action.id;\n    }); //if the qt == 0 then it should be removed\n\n\n    if (_addedItem3.quantity === 1) {\n      var _new_items2 = state.addedItems.filter(function (item) {\n        return item.id !== action.id;\n      });\n\n      var _newTotal4 = state.total - _addedItem3.price;\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addedItems: _new_items2,\n        total: _newTotal4\n      });\n    } else {\n      _addedItem3.quantity -= 1;\n\n      var _newTotal5 = state.total - _addedItem3.price;\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        total: _newTotal5\n      });\n    }\n  }\n\n  if (action.type === ADD_SHIPPING) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      shipping: state.shipping += 6\n    });\n  }\n\n  if (action.type === 'SUB_SHIPPING') {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      shipping: state.shipping -= 6\n    });\n  }\n\n  if (action.type === RESET_CART) {\n    return _objectSpread(_objectSpread({}, state), {}, {\n      addedItems: [],\n      total: 0,\n      shipping: 0\n    });\n  } else {\n    return state;\n  }\n};\nvar persistConfig = {\n  key: 'primary',\n  storage: storage\n};\nvar persistedReducer = persistReducer(persistConfig, reducers);\n\nfunction makeStore(initialState) {\n  return createStore(persistedReducer, initialState, composeWithDevTools(applyMiddleware()));\n}\n\nexport var initializeStore = function initializeStore(preloadedState) {\n  var _store2;\n\n  var _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : makeStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = makeStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (false) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  var store = useMemo(function () {\n    return initializeStore(initialState);\n  }, [initialState]);\n  return store;\n}","map":null,"metadata":{},"sourceType":"module"}